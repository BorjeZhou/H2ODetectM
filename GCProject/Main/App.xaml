<?xml version="1.0" encoding="utf-8"?>
<Application x:Class="GCProject.Main.App" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:GCProject.Main" xmlns:converter="clr-namespace:GCProject.Main.Converters" xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf">
  <Application.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml" />
      </ResourceDictionary.MergedDictionaries>
      <SolidColorBrush x:Key="PrimaryHueLightBrush" Color="#349fda" />
      <SolidColorBrush x:Key="PrimaryHueLightForegroundBrush" Color="#333333" />
      <SolidColorBrush x:Key="PrimaryHueMidBrush" Color="#0288d1" />
      <SolidColorBrush x:Key="PrimaryHueMidForegroundBrush" Color="#FFFFFF" />
      <SolidColorBrush x:Key="PrimaryHueDarkBrush" Color="#015f92" />
      <SolidColorBrush x:Key="PrimaryHueDarkForegroundBrush" Color="#FFFFFF" />
      <SolidColorBrush x:Key="SecondaryAccentBrush" Color="#689f38" />
      <SolidColorBrush x:Key="SecondaryAccentForegroundBrush" Color="#FFFFFF" />
      <SolidColorBrush x:Key="GloableBackgroundColor" Color="#F0F0F0" />
      <Style x:Key="DispalyTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextBoxBase.IsReadOnly" Value="true" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Background" Value="#FFFAEBD7" />
      </Style>
      <Style x:Key="EditTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Background" Value="#FFFFFFFF" />
        <Setter Property="Validation.ErrorTemplate">
          <Setter.Value>
            <ControlTemplate>
              <StackPanel Orientation="Horizontal">
                <Popup Name="popup" AllowsTransparency="True" Placement="Right">
                  <Border Name="errorBorder" Background="#ffdc000c" Opacity="0" MinHeight="30">
                    <TextBlock Margin="5,0" Foreground="#FFFFFFFF" TextWrapping="Wrap" VerticalAlignment="Center" Text="{Binding ElementName=adorner, Path=AdornedElement.(Validation.Errors).CurrentItem.ErrorContent}" />
                  </Border>
                </Popup>
                <Border BorderBrush="#FFFF0000" BorderThickness="1">
                  <Grid>
                    <AdornedElementPlaceholder Name="adorner" />
                  </Grid>
                </Border>
              </StackPanel>
              <ControlTemplate.Triggers>
                <DataTrigger Value="True" Binding="{Binding ElementName=adorner, Path=AdornedElement.IsKeyboardFocused}">
                  <DataTrigger.Setters>
                    <Setter TargetName="popup" Property="Popup.IsOpen" Value="true" />
                  </DataTrigger.Setters>
                  <TriggerBase.EnterActions>
                    <BeginStoryboard Name="fadeInStoryboard">
                      <Storyboard>
                        <DoubleAnimation Duration="00:00:00.15" Storyboard.TargetName="errorBorder" Storyboard.TargetProperty="Opacity" To="1" />
                      </Storyboard>
                    </BeginStoryboard>
                  </TriggerBase.EnterActions>
                  <TriggerBase.ExitActions>
                    <StopStoryboard BeginStoryboardName="fadeInStoryboard" />
                    <BeginStoryboard Name="fadeOutStoryBoard">
                      <Storyboard>
                        <DoubleAnimation Duration="00:00:00" Storyboard.TargetName="errorBorder" Storyboard.TargetProperty="Opacity" To="0" />
                      </Storyboard>
                    </BeginStoryboard>
                  </TriggerBase.ExitActions>
                </DataTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <converter:Bool2BgColorConverter x:Key="bool2BgColorConverter" />
      <converter:Alarm2BgColorConverter x:Key="alarm2BgColorConverter" />
      <converter:Bool2VisibilityConverter x:Key="bool2VisibilityConverter" />
      <converter:Bool2VisibilityConverter2 x:Key="bool2VisibilityConverter2" />
      <converter:Bool2StringConverter x:Key="bool2StringConverter" />
      <converter:EnumToBoolConverter x:Key="enumToBoolConverter" />
      <converter:Bool2ImageSource x:Key="bool2ImageSource" />
      <converter:CommonValueConverter x:Key="commonValueConverter" />
      <converter:Bool2SelectionModeConverter x:Key="bool2SelectionModeConverter" />
      <converter:DateTime2StringConverter x:Key="dateTime2StringConverter" />
      <converter:Bool2ReversedBool x:Key="bool2ReversedBool" />
      <converter:Str2intConverter x:Key="str2intConverter" />
      <Style x:Key="ListViewItemContainerStyle1" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="#FFA9A9A9" />
        <Setter Property="Height" Value="19" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ListBoxItem}">
              <Border Background="{TemplateBinding Control.Background}" BorderThickness="0,0,0,1" BorderBrush="{TemplateBinding Control.BorderBrush}" ClipToBounds="{TemplateBinding UIElement.ClipToBounds}" Margin="{TemplateBinding FrameworkElement.Margin}">
                <Grid>
                  <Border Name="MouseOverBorder" Opacity="0" Background="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}" />
                  <Border Name="SelectedBorder" Opacity="0" RenderTransformOrigin="0.5,0.5" Background="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}">
                    <UIElement.RenderTransform>
                      <ScaleTransform ScaleX="1" />
                    </UIElement.RenderTransform>
                  </Border>
                  <wpf:Ripple ContentControl.ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentControl.Content="{TemplateBinding ContentControl.Content}" ContentControl.ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" UIElement.Focusable="False" Control.HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Control.Padding="{TemplateBinding Control.Padding}" wpf:Ripple.RecognizesAccessKey="False" UIElement.SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Control.VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" wpf:Ripple.Feedback="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}" />
                </Grid>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter Property="UIElement.Opacity" Value=".56" />
                </Trigger>
                <Trigger Property="ListBoxItem.IsSelected" Value="True">
                  <Setter Property="Height" Value="30" />
                  <Setter Property="Background" Value="#FF006400" />
                  <Setter Property="Foreground" Value="#FFFAEBD7" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </ResourceDictionary>
  </Application.Resources>
</Application>